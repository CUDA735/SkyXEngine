
/*! \page page1 Общая информация о библиотеках
\tableofcontents
\section sec0 Общие правила библиотек

Каждая  функция в библиотеках имеет префикс с именем самой библиотеки которое формируется исходя из назначения. После следует символ _ после которого (желательно) указывается имя объекта/подсистемы/подмодуля если имеется.\n
Все функции имя которых после _ начинается с 0 можно вызывать без инициализации самой библиотеки, все остальные можно вызывать только после инициализации.\n
Набор стандартных функций с 0:
 - 0GetVersion – возвращает номер версии текущей библиотеки.
 - 0Create – инициализирует текущую библиотеку.

Функция Dbg_Set переназначает стандартную функцию вывода сообщений, и доступна в любой момент времени, независимо от инициализации библиотеки.\n
Функции имя которых после _ начинается с A являются начальными, и могут быть вызваны только после того как библиотека была инициализирована.\n
Набор стандартны функций с A:
 - AGetName  – получить имя текущей инициализированной библиотеки, которое было указано при инициализации.
 - AKill – уничтожить инициализированную библиотеку.

Каждая инициализированная библиотека должна иметь имя, уникальное или нет задается в момент вызова инициализации исходя из нужд программиста.\n
Каждая библиотека также может называться подсистема, в некоторых случаях ядро.\n
Для подключения любой библиотеки (в виде заголовочного файла либо исходного кода) осуществляется посредством подключения в проект всего одного файла с кодом:
 - для подключения внешней библиотеки (dll) нужно подключить заголовочный файл с расширением h а также файл с для экспорта функций с расширением lib.
 - для подключения исходного кода библиотеки достаточно подключить только cpp файл с исходным кодом.

Имена заголовочного и файла с исходным кодом одинаковые и отражают назначение самой библиотеки. К примеру sxgcore – графическое ядро, sxinput – система ввода (клавиатура/мышь), sxpp – библиотека с постпроцессом и т.д.

\section sec1 Начальный базовый интерфейс IBaseObject
Начальным родителем всех интерфейсов является базовый интерфейс IBaseObject, который объявлен в файле gdefines.h и имеет следующий вид:\n
\code 
struct IBaseObject
{
	virtual ~IBaseObject(){};
	virtual void Release()=0;
};
\endcode

\section sec2 Система вывода сообщений в библиотеках

Во всех библиотеках предусмотрена система вывода сообщений через единую функцию. По умолчанию все сообщения выводятся через стандартную функцию def_report, объявленную в gdefines.h.\n
Стандартная функция имеет ограничение на длину сообщения которое регулируется макроопределением REPORT_MSG_MAX_LEN объявленном в gdefines.h. При написании своего обработчика сообщений следует использовать данное ограничение.\n
Уровни критичности сообщений объявлены в gdefines.h: \n
 - #REPORT_MSG_LEVEL_NOTICE
 - #REPORT_MSG_LEVEL_WARRNING
 - #REPORT_MSG_LEVEL_ERROR

В случае переназначения стандартной функции сообщений необходимо самостоятельно(в переназначаемой функции) обрабатывать уровни критичности, для примера можно использовать механизм стандартной функции.\n

Тип функции для сообщений: \n
 - #report_func

Каждая библиотека имеет функцию для переназначения стандартной функции сообщений на пользовательскую. Пример основного ядра: \n
 - #Core_Dbg_Set(report_func rf);

Данная функция может вызываться в любой момент времени, инициализация библиотеки необязательна.\n
Для формирования строки вида полный_путь_до_файла : номер_текущей_строки можно воспользоваться макроопределением gen_msg_location объявленной в gdefines.h.

\section sec3 Ограничения на размеры
 - #CORE_NAME_MAX_LEN - максимальная длина имени объекта ядра/подсистемы 
 - #OBJECT_NAME_MAX_LEN - максимальная длина имени абстрактного объекта 
 - #CONFIG_SECTION_MAX_LEN - максимальная длина секции конфигурационного файла

Под абстрактным объектом следует понимать обобщенные элементы движка, к примеру имя статической модели, имя источника света и прочее.
*/

/*!
\file
Заголовочный файл для всех библиотек движка SkyXEngine
*/

#ifndef gdefines_h
#define gdefines_h

//! макрос экспорта/импорта из библиотек
#if !defined(SX_LIB_API)
	#if defined(SX_EXE)
		#define SX_LIB_API extern "C" __declspec (dllimport)
	#elif defined(SX_DLL)
		#define SX_LIB_API extern "C" __declspec (dllexport)
	#else
		#define SX_LIB_API 
	#endif
#endif

/*! \name Некоторые ограничения на размерности */
///@{
#define CORE_NAME_MAX_LEN		32	/*!< максимальная длина имени объекта ядра/подсистемы */
#define OBJECT_NAME_MAX_LEN		64	/*!< максимальная длина имени абстрактного объекта */
#define CONFIG_SECTION_MAX_LEN	64	/*!< максимальная длина секции конфигурационного файла */
///@}

//for warning C4003: not enough actual parameters for macro
#define _VOID

#ifndef IFACEBASEOBJECT
#define IFACEBASEOBJECT

/*! Общий базовый интерфейс. Базовый интерфейс, от него происходит наследование во всех интерфейсах
 \note для удаления объекта вызвать Release, после сего объект будет уничтожен, но адрес не обнулится
 \note для удаления и обнуления использовать #mem_release_del
*/
struct IBaseObject 
{
	virtual ~IBaseObject(){};
	virtual void Release()=0;
};

#endif

#include <common/sxtypes.h>

//! Считывание неопределенного количества аргументов при форматированнии строки в buf на основании format
#define format_str(buf,format) va_list va; va_start(va, format); vsprintf_s(buf, sizeof(buf), format, va); va_end(va);


#define macro_text_(x) #x
#define macro_text(x) macro_text_(x)

//! Формирование строки вида file_name:string_num
#define gen_msg_location __FILE__ ## ": " ## macro_text(__LINE__)

#define _assert_s(str,...) AllocConsole();freopen("CONOUT$", "wt", stdout); fprintf(stdout, str, ...); exit(1);
#define _assert(expr) if(!expr) _assert_s(#expr)

//! Тип функции вывода отладочной информации
typedef void(*report_func) (int level, const char* format, ...);

#include <cstdio> 
#if defined(_WINDOWS)
#	include <Windows.h>
#endif

/** \name Уровни критичности сообщений для функции репортов */
//! @{
#define REPORT_MSG_LEVEL_NOTICE		0	/*!< \brief заметка */
#define REPORT_MSG_LEVEL_WARRNING	1	/*!< \brief предупреждение */
#define REPORT_MSG_LEVEL_ERROR		-1	/*!< \brief ошибка, желательно вылетать */

#define REPORT_MSG_MAX_LEN 4096		/*!< максимальный размер сообщения */
//! @}

#ifndef DEFAULT_FUNCTION_REPORT 
#define DEFAULT_FUNCTION_REPORT

/*! Дефолтовая функция вывода отладочной информации ВМЕСТО НЕЕ В ЯДРО/ПОДСИСТЕМУ НУЖНО ОТПРАВЛЯТЬ СВОЮ */
void def_report(int level, const char* format, ...)
{
#if defined(_WINDOWS)
	AllocConsole();
	freopen("CONOUT$", "wt", stdout);
#endif
	char buf[4096];
	int strl = sizeof(buf);
	format_str(buf, format);
	fprintf(stdout, "!!! report function is not init !!! %s\n", buf);
	fprintf(stdout, "work program will be stopped within 5 seconds ...");
	Sleep(5000);
	exit(1);
}

#endif
#endif
