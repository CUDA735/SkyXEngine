
/*
mtrltp_refract.ps
Рендер прозрачной геометрии с рефракцией
*/

#include "../struct.h"
#include "../mtrl.h"

//##########################################################################

SamplerState g_sScene: register(s0);
SamplerState g_sSceneRefract: register(s1);
Texture2D g_txColor: register(t0);		// basetexture
Texture2D g_txDuDv: register(t2);		// detail_r
Texture2D g_txParameters: register(t10);		// 
Texture2D g_txSceneColor: register(t11);		// 
Texture2D g_txSceneDepth: register(t12);		// 

//##########################################################################

// half4 g_vNearFarLayers;
#include "../const.h"

cbuffer CDataClipPlanes: register(b6)
{
	float4 g_vClipPlanes[4];
};

//##########################################################################

float4 main(VSO_SceneCommon IN):COLOR0
{
	// ClipFar(IN.vPos.z, g_vNearFarLayers.y);
	// IN.vNormal = normalize(IN.vNormal);
	
	float3 vPos = IN.vPos.xyz / IN.vPos.w;
	[unroll]for(uint i = 0; i < 4; ++i)
	{
		float4 vPlane = g_vClipPlanes[i];
		clip(dot(vPlane.xyz, vPos) + vPlane.w);
	}
	
	float2 vDuDv = g_txDuDv.Sample(g_sScene, IN.vTexUV).xy;
	
	float2 vSceneUV = (vPos.xy * float2(1.0, -1.0) + float2(0.5 / 1024.0, 0.5 / 768.0)) * 0.5 + 0.5;
	float2 vSceneUVrefract = vSceneUV + (vDuDv - 0.5) * 0.3; // 0.035
	
	float3 vSceneColor;
	if(g_txSceneDepth.Sample(g_sSceneRefract, vSceneUVrefract).x < ComDepthByPos(IN.vPos, g_vNearFarLayers.xy))
	{
		vSceneColor = g_txSceneColor.Sample(g_sSceneRefract, vSceneUV).xyz;
		// clip(-1);
	}
	else
	{
		// clip(-1);
		vSceneColor = g_txSceneColor.Sample(g_sSceneRefract, vSceneUVrefract).xyz;
		// return(float4(ComDepthByPos(IN.vPos, g_vNearFarLayers.xy), 0, 0, 1));
		// return(float4(g_txSceneDepth.Sample(g_sSceneRefract, vSceneUVrefract).x, 0, 0, 1));
	}		
	
	
	// float3 vSceneColor = g_txSceneColor.Sample(g_sSceneRefract, vSceneUVrefract).xyz;
	float4 vColor = g_txColor.Sample(g_sScene, IN.vTexUV);
	
	// return(float4(float3(), 1.0));
	return(float4(float3(vSceneColor * (1.0 - vColor.w) + vColor.xyz * vColor.w), 1.0));
		
	/* return(CreateGbuffer(
		float4(g_txColor.Sample(g_sScene, IN.vTexUV).xyz, 0.0f), 
		IN.vNormal, 
		g_txParameters.Sample(g_sScene, IN.vTexUV), 
		IN.vPos, 
		g_vNearFarLayers
	)); */
}
