
/*
lighting_gi.ps

*/

#include <lpv.h>
#include <struct.h>
#include <mtrl.h>
#include <const.h>

//##########################################################################

SamplerState g_sPointClamp: register(s0);

Texture2D g_txDepth:register(t0);
Texture2D g_txNormals:register(t1);
Texture2D g_txColor:register(t2);
Texture2D g_txParams:register(t3);
Texture2D g_txAO :register(t13);

//#############################################################################

float4 main(VSO_ResPos IN): COLOR0
{
	float4 vAlbedo = g_txColor.Sample(g_sPointClamp, IN.vTexUV);
	float4 vNormals = g_txNormals.Sample(g_sPointClamp, IN.vTexUV);
	float4 vParams = g_txParams.Sample(g_sPointClamp, IN.vTexUV);
	float fDepth = g_txDepth.Sample(g_sPointClamp,IN.vTexUV).r;
	
#ifdef USE_AO
	float3 vAO = g_txAO.Sample(g_sPointClamp, IN.vTexUV).xxx;
#endif
	
	float fMetallic = vParams.y;
	float fAO = vParams.w;
	
	float3 vPosition = g_vObserverPosCam.xyz + IN.vWorldRay * fDepth; // Мировая позиция пиксела
	
	
	float3 vNormalPixel = normalize(NormalDecode(vNormals.xyz).xyz);
	
	float3 vReflectDir = normalize(reflect(g_vObserverPosCam.xyz - vPosition, vNormalPixel));
	
	// OUT.vAmdient.xyz = lerp(vAlbedo.xyz, GetPixelLight(vPosition, vNormalPixel) * vAlbedo.xyz, vAlbedo.w);
	float3 vOut = lerp(vAlbedo.xyz, GetPixelLight(vPosition, lerp(vNormalPixel, vReflectDir, fMetallic)) * vAlbedo.xyz * fAO 
#ifdef USE_AO
	* vAO
#endif
	, vAlbedo.w);
	
	return(float4(vOut, 1.0));
}





















