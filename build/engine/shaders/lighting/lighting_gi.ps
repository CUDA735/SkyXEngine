
/*
lighting_gi.ps

*/

#include <lpv.h>
#include <struct.h>
#include <mtrl.h>

//##########################################################################

cbuffer perFrame: register(b1)
{
	float3 g_vViewPos;
};

//##########################################################################

SamplerState g_sPointClamp: register(s0);

Texture2D g_txDepth:register(t0);
Texture2D g_txNormals:register(t1);

//#############################################################################

PSO_Lbuffer main(VSO_ResPos IN)
{
	PSO_Lbuffer OUT;

	float4 vNormals = g_txNormals.Sample(g_sPointClamp, IN.vTexUV);
	float fDepth = g_txDepth.Sample(g_sPointClamp,IN.vTexUV).r;
	
	float3 vOrigin = float3(0, 0, 0); // Центр сетки
	float4 vPosition = float4(g_vViewPos.xyz + IN.vWorldRay * fDepth, 1.0); // Мировая позиция пиксела
	
	float3 vNormalPixel = normalize(NormalDecode(vNormals.xyz).xyz);
	
	OUT.vAmdient.xyz = GetPixelLight(vPosition.xyz, vNormalPixel);
	OUT.vAmdient.w = 1;
	OUT.vSpecular = 0;
	
	return OUT;
}





















