
/*
ppgensm_point.ps
Генерация теней для локального точечного света
*/

#include "../struct.h"
#include "../shadow.h"
#include "../mtrl.h"
#include "../ps.h"

//##########################################################################

cbuffer perFrame: register(b1)
{
	float3 g_vPosCam;
};

cbuffer perShadow: register(b6)
{
	float2 g_vPixelSizeBias;
};

cbuffer perLight: register(b0)
{
	float4 g_vLightColorPower;
	float4 g_vLightPosShadow;
#ifdef IS_SPOT
	float4 g_vLightSpotDirection;
	float2 g_vLightSpotInnerOuterAngles;
#endif
};

//##########################################################################

// sampler2D g_sDepthView:register(s0);
// samplerCUBE g_sDepthShadow:register(s1);

SamplerState g_sPointClamp: register(s0);
SamplerState g_sLinearClamp: register(s1);
SamplerComparisonState g_sComparisonLinearClamp: register(s1);
// SamplerState g_sPointWrap: register(s2);

Texture2D g_txDepthView: register(t0);
TextureCube g_txDepthShadow: register(t1);
Texture2D g_txNormals: register(t3);

// g_txDepthShadow.Sample(g_sLinearClamp, IN.vTexUV)

//##########################################################################

float4 main(VSO_ResPos IN):COLOR0
{
	float fShadow = 0.0;
	//g_vPixelSizeBias.y = -0.05;
	// half fDepth = tex2Dlod2(g_sDepthView, IN.vTexUV, 0).r;
	float fDepth = g_txDepthView.Sample(g_sPointClamp, IN.vTexUV).r;
	float3 vNormal = normalize(NormalDecode(g_txNormals.Sample(g_sPointClamp, IN.vTexUV).xyz).xyz);
	
	// return(1);
	
	
	
	float4 vPosition = float4(g_vPosCam + IN.vWorldRay * fDepth, 1.0);
	
	float3 vDir = vPosition.xyz - g_vLightPosShadow.xyz;
    float fDistance = dot(vDir, vDir);
	// return(fDistance);
	// half fDistance = length(vDir);
	// half fDivDist = 1.0/fDistance;

	vDir = normalize(vDir);
	float3 vTexUV = vDir;
	
	float cosTheta = saturate(dot(vNormal, -vDir));
	// / (g_vPixelSizeBias.x * 0.0009765625 / 8.0) 
	// float fBias = clamp(0.2f / (g_vPixelSizeBias.x * 0.0009765625 * 4) * tan(acos(cosTheta)), 0.1f,0.4f / (g_vPixelSizeBias.x * 0.0009765625 * 4));
	// float fBias = clamp(0.2f * tan(acos(cosTheta)), 0.1f, 0.4f);
	float fBias = 0.0;
	// float fBias = clamp(0.2f / (g_vPixelSizeBias.x * 0.0009765625 / 2.0) * tan(acos(cosTheta)), 0.1f,2.0f);
	float fCompareTo = fDistance - fBias;
	// float fCompareTo = fDistance - 0.2;
	
	fShadow = g_txDepthShadow.SampleCmpLevelZero(g_sComparisonLinearClamp, vTexUV, fCompareTo);
	
	float fOffset = g_vPixelSizeBias.x * 4; // g_vPixelSizeBias.x
	
// #undef GSC_6
#ifdef GSC_6
	for(int x=0;x<=1;++x)
	{
		for(int y=0;y<=1;++y)
		{
			for(int z=0;z<=1;++z)
			{
				vTexUV = vDir + float3(fOffset * x, fOffset * y, fOffset * z);
				fShadow += g_txDepthShadow.SampleCmpLevelZero(g_sComparisonLinearClamp, vTexUV, fCompareTo);
			}
		}
	}
	
	// fShadow *= 0.125;
	fShadow *= 1.0 / 7.0;
#endif

	return saturate(fShadow);
} 