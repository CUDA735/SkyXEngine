// https://github.com/mafian89/Light-Propagation-Volumes/blob/master/shaders/lightInject.frag and
// https://github.com/djbozkosz/Light-Propagation-Volumes/blob/master/data/shaders/lpvInjection.cs seem
// to use the same coefficients, which differ from the RSM paper. Due to completeness of their code, I will stick to their solutions.
/*Spherical harmonics coefficients â€“ precomputed*/
#define SH_C0 0.282094792f // 1 / 2sqrt(pi)
#define SH_C1 0.488602512f // sqrt(3/pi) / 2

/*Cosine lobe coeff*/
#define SH_cosLobe_C0 0.886226925f // sqrt(pi)/2
#define SH_cosLobe_C1 1.02332671f // sqrt(pi/3)
#define PI 3.1415926f

struct PS_IN
{
	float4 screenPosition :SV_POSITION;
	float3 normal :WORLD_NORMAL;
	float3 flux :LIGHT_FLUX;
	uint depthIndex :SV_RenderTargetArrayIndex;
};

struct PS_OUT
{
	float4 redSH :SV_Target0;
	float4 greenSH :SV_Target1;
	float4 blueSH :SV_Target2;
};

float4 dirToCosineLobe(float3 dir)
{
	//dir = normalize(dir);
	return float4(SH_cosLobe_C0, -SH_cosLobe_C1 * dir.y, SH_cosLobe_C1 * dir.z, -SH_cosLobe_C1 * dir.x);
}

float4 dirToSH(float3 dir)
{
	return float4(SH_C0, -SH_C1 * dir.y, SH_C1 * dir.z, -SH_C1 * dir.x);
}

PS_OUT main(PS_IN input)
{
	PS_OUT output;

	const static float surfelWeight = 0.015;
	float4 coeffs = (dirToCosineLobe(input.normal) / PI) * surfelWeight;
	output.redSH = coeffs * input.flux.r;
	output.greenSH = coeffs * input.flux.g;
	output.blueSH = coeffs * input.flux.b;
	
	// output.greenSH = float4(1.0, 1.0, 1.0, 1.0);
	// output.redSH = float4(1.0, 1.0, 1.0, 1.0);

	return output;
}
