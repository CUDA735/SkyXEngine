
sampler2D BaseSampler:register(s0);
sampler2D DepthSampler:register(s1);
sampler2D SceneSampler:register(s2);

float RefractCoef;
float SoftCoef;
float2 NearFar;

struct VS_OUT 
{
	float4 Position	:POSITION0;
	float2 TexUV	:TEXCOORD0;
	float Alpha		:TEXCOORD1;
	float4 Pos		:TEXCOORD2;
	float Light	:TEXCOORD3;
	float2 TexUV2	:TEXCOORD4;
};


float4 main(VS_OUT IN):COLOR0
{
	float4 color = tex2D(BaseSampler,IN.TexUV);
	color.a *= IN.Alpha.x;
	#if defined(PART_SOFT) || defined(PART_REFRACTION)
	float2 texuv = IN.Pos.xy / IN.Pos.w;
	texuv.x = texuv.x * 0.5f + 0.5f;
	texuv.y = texuv.y * (-0.5f) + 0.5f;
	#endif
	
	#if defined(PART_SOFT)
	float depthmap = tex2D(DepthSampler,texuv);
	float curdepth = IN.Pos.z / NearFar.y;
	
	color.a *= saturate((depthmap - curdepth)*NearFar.y)*SoftCoef;
	#endif
	
	#if defined(PART_REFRACTION)
	texuv.x +=/*IN.TexUV2.x +*/ sin(color.a*0.1)*RefractCoef;
	texuv.y +=/*IN.TexUV2.y +*/ cos(color.a*0.1)*RefractCoef;
	
	float4 colorscene = tex2D(SceneSampler,texuv);
	//colorscene = normalize(colorscene);
	//colorscene = tex2D(SceneSampler,colorscene.xy);
	
	color.rgb = colorscene.rgb;//lerp(color.rgb,colorscene.rgb,1.f-color.a);
	color.a = color.a*2.f;
	#endif

	#if defined(PART_LIGHT)
	color *= IN.Light;
	#endif
	
	return color;
}