
#include <../struct.h>

sampler2D ColorSampler:register(s0);
sampler2D AmbientSampler:register(s1);
sampler2D SpecDiffSampler:register(s2);
sampler2D ParamSampler:register(s3);
sampler2D s4:register(s4);
sampler2D ShadowMap:register(s5);


float4 main(vs_out_pp IN):COLOR0
{
	float4 Param = /*float4(1,1,1,1);//*/tex2D(ParamSampler,IN.TexUV);
	//return Param.y;
	float lighting = saturate(max((Param.y) * 0.5f, 0.1f));///*LightColor.a **/ saturate(max((Param.y) * 0.8f, 0.1f))*Param.y;
	//return lighting;
	float tmpvec = float4(0.2,0.2,0.7,1);
	float4 color = tex2D(ColorSampler,IN.TexUV);
	//color.a = 1;
	//return color;
	//color.xyz = lerp(color,tmpvec,1.f-color.a);
	float4 color2 = color;
	float4 ambient = tex2D(AmbientSampler,IN.TexUV);
	//return float4(color.rgb + ambient.rgb,1);
	float4 spec = tex2D(SpecDiffSampler,IN.TexUV);
	//return spec.g;
	float fAdaptedLum = tex2D(s4, float2(0.5f, 0.5f));
	float shadow = tex2D(ShadowMap, IN.TexUV).r;
	
	/*float Lp = ( 0.0001 / fAdaptedLum ) * ambient.rgba;
    float fToneScalar = Lp / ( 1.0f + Lp );
	ambient.rgba *= fToneScalar;*/
	
	/*Lp = ( 0.1 / fAdaptedLum ) * (ambient.w);
    fToneScalar = Lp / ( 1.0f + Lp );
	ambient.w *= fToneScalar;*/
	
	/*Lp = ( 0.0001 / fAdaptedLum ) * (spec.rgb);
    fToneScalar = Lp / ( 1.0f + Lp );
	spec.rgb *= fToneScalar;*/
	/*ambient.rgb *= (20/(fAdaptedLum + 0.001f));
	ambient.rgb /= 1+ambient.rgb;*/
	
	/*float shadow_hard = min(shadow,ambient.w);

	float tmpfAdaptedLum = (fAdaptedLum < 0.0001 ? 0.0001 : fAdaptedLum);
	float shadow_soft = shadow_hard;// = max(shadow_hard+0.01,0.01)*(ambient.w+0.1);
	ambient.w += 0.01;*/
	//shadow_soft = shadow_soft + 0.1;
	//shadow_soft = shadow_soft * (1.f+0.01);
	
	//shadow_soft = (shadow_soft+0.1) * ambient.w;
	//shadow_soft *= 1/(fAdaptedLum + 0.001f);
	//shadow_soft /= 1+shadow_soft;
	
	//ambient.w += fAdaptedLum*0.01;///*(shadow_soft >= 0.0f ? fAdaptedLum*0.5 : 0);//*/fAdaptedLum;// + ambient.w * 0.1;
	//shadow_soft = (lerp(shadow_soft,ambient.w,saturate(0.3+shadow_hard)));
	//shadow_soft *= 0.2;
	//shadow_soft *= 0.1/(fAdaptedLum + 0.001f);
	//shadow_soft /= fAdaptedLum+shadow_soft;
	
	/*ambient.w *= 1/(fAdaptedLum + 0.001f);
	ambient.w /= fAdaptedLum+ambient.w;
	//ambient.w*=ambient.w;
	ambient.w += fAdaptedLum;*/
	//ambient.w*=ambient.w;
	//ambient.w*=ambient.w;
	//ambient.w*=4;
	//shadow_soft = (shadow_soft < tmpfAdaptedLum*0.5 ? tmpfAdaptedLum*0.5 : shadow_soft);
	//return float4(ambient.xyz,1);
	
	
	/*ambient *= 2/(fAdaptedLum + 0.001f);
	ambient /= (fAdaptedLum + ambient);*/
	
	
	color.xyz = ((sqrt(ambient.xyz * ambient.w)*color.xyz)) + sqrt(spec.r*ambient.xyz);//((ambient.xyz)*color.xyz) * ambient.w + ((clamp(spec.r*shadow_hard*100*ambient.xyz*32,0,spec.r)));//(ambient.xyz*(1-lighting)+color.xyz) * ambient.w;// + (spec.r*ambient.xyz);///*lerp(ambient.xyz,color.xyz,saturate(lighting))*/ (ambient.xyz*0.3*(1-lighting)+color.xyz) * ambient.w + ((spec.r*lerp(ambient.xyz,color.xyz,1-lighting)));//((ambient.xyz) + (color.xyz)) * ambient.w + (spec.rgb);


	//color.rgb = (1 - exp(-pow(fAdaptedLum, -1)  * color.rgb));

	color.rgb *= 0.1/(fAdaptedLum + 0.001f);
	color.rgb /= (fAdaptedLum + color.rgb);
	
	
	
	
	/*float3 vSceneColor = color.rgb;
  float fAverageLuminance = (fAdaptedLum);
        
  float3 vFinalColor = vSceneColor;// + vPostProcessResult * 0.25f;

  float Lp1 = ( 10 / fAverageLuminance ) * GetLuminance( vFinalColor );
    float fToneScalar1 = (Lp1) / ( 1 + Lp1 );
  return float4( vFinalColor * (Lp1 + color.rgb)*1, 1.f );*/
	//color.rgb = _toneReinhard(color.rgb,fAdaptedLum,0.0001,0.1);
	/*float3 LUMINANCE_VECTOR  = float3(0.2125, 0.7154, 0.0721);
	half fWhitePoint = 1.5; 
half fInvWhitePoint2 = 1.0f/(fWhitePoint*fWhitePoint);
half fLum = dot(half4(color.rgb,1),half4(LUMINANCE_VECTOR,1));
half fAdaptedLumDest = lerp(fAdaptedLum,1.8,0.0005); //MIDDLE GRAY
half Lp = 0.48f * fLum / fAdaptedLumDest;
half Ld = Lp * ( 1 + Lp * fInvWhitePoint2) / ( 1 + Lp );
color *= Ld/fLum;

half fSaturation=1.00f; //Цветность
half fFinalLum = dot(color.rgb, LUMINANCE_VECTOR);
color.rgb = lerp((half3)fFinalLum, color.rgb, fSaturation);
half fInvContrast = 1.0; //Контраст
color.rgb = (color.rgb-0.5f)*fInvContrast+0.5;*/
	return color;
	//return (0.02/(fAdaptedLum + 0.001f))/( 0.02f + (1.2/(fAdaptedLum + 0.001f)));
}