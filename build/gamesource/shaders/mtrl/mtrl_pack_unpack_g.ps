


half2 encodenormal(half3 normal)
{
 half2 enc = normalize(normal.xy) * (sqrt(-normal.z*0.5+0.5));
    enc = enc*0.5+0.5;
    return enc;
	//half2 Nenc;
    /*half f = sqrt(8*normal.z+8);
    return normal.xy / f + 0.5;*/
	/*Nenc = n.xy * 0.5f + 0.5f;
  Nenc.x *= (n.z < 0.0f) ? 0.1f : 1.0f;*/
  //return Nenc;
}
half3 decodenormal(half2 normal)
{
	half4 nn = half4(normal,normal)*half4(2,2,0,0) + half4(-1,-1,1,-1);
    half l = dot(nn.xyz,-nn.xyw);
    nn.z = l;
    nn.xy *= sqrt(l);
    return nn.xyz * 2 + half3(0,0,-1);
    /*half2 fenc = normal*4-2;
    half f = dot(fenc,fenc);
    half g = sqrt(1-f/4);
    half3 n;
    n.xy = fenc*g;
    n.z = 1-f/2;
    return n;*/
	/*half3 N;
	N.y = enc.y;
		if(enc.x * 10.f < 0)
		{
			N.x = enc.x * 10.f;
			N.z = -1;
		}
		else
		{
			N.x = enc.x;
			N.z = 1;
		}
	//N = 2.0f * N - 1.0f;
	N.xy = 2.0f * abs(N.xy) - 1.0f;
  N.z = ((N.z < 0.0f) ? -1.0f : 1.0f)
    * sqrt(abs( 1.0f - dot(N.xy, N.xy) ));
	return N;*/
}



float pack2in1(float2 data)
{
	return ((data.x * 127.f) + data.y)/127.f;
}

float2 unpack1to2(float data)
{
	data *= 127.f;
	float2 unpackdata;
	unpackdata.y = frac(data);
	unpackdata.x = floor(data) / 127.f;
	return unpackdata;
}



#define halfdata 32767.f
#define halfdata_1 32768.f
#define floatdata 65536.f

float pack2in1_2(float2 data)
{
	//quantize from 0-1 floats, to 0-15 integers, which can be represented in 4 bits
data.x = round(data.x*halfdata);
data.y = round(data.y*halfdata);
//bit shift a into the upper 4 bits of the fraction, and b into the lower 4 bits
float c = dot( float2(data.x,data.y), float2(1.0/(floatdata/halfdata_1), 1.0/floatdata ) );
return c;
	//return ((data.x * 255.f) + data.y)/*/512.f*/;
}

float2 unpack1to2_2(float data)
{
	//data *= 512.f;
	/*float2 unpackdata;
	unpackdata.y = frac(data);
	unpackdata.x = floor(data) / 255.f;
	return unpackdata;*/
	
	float temp = data * floatdata/halfdata_1;
//reconstruct the original (but quantized) a&b
float2 unpackdata;
unpackdata.x = floor(temp) / halfdata;
unpackdata.y = frac(temp) * halfdata_1/halfdata;
return unpackdata;
}

