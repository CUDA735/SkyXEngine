
/*
ppgensm_point.ps
Генерация теней для локального точечного света
*/

#include <../struct.h>
#include <../shadow.h>
#include <../mtrl.h>
#include <../ps.h>

//##########################################################################

half3 g_vPosCam;
half2 g_vSizeMapBias;
half g_fPixelSize;
half4 g_vLightPos;

//##########################################################################

sampler2D g_sDepthView:register(s0);
samplerCUBE g_sDepthShadow:register(s1);

//##########################################################################

half4 main(VSO_ResPos IN):COLOR0
{
	half fShadow = 0.0;
	half fDepth = tex2Dlod2(g_sDepthView, IN.vTexUV, 0).r;
	
	half4 vPosition = half4(g_vPosCam + IN.vWorldRay * fDepth, 1.0);
	
	half3 vDir = g_vLightPos.xyz - vPosition.xyz;
    half fDistance = length(vDir) / g_vLightPos.w;
	
	vDir = -vDir;
	
	fShadow = ShadowCalcShading(texCUBE(g_sDepthShadow, vDir).x, fDistance, g_vSizeMapBias.y);
	
	fShadow += ShadowCalcShading(texCUBE(g_sDepthShadow, (vDir + half3( 0, -1, 0) * g_fPixelSize)).x, fDistance, g_vSizeMapBias.y);
	fShadow += ShadowCalcShading(texCUBE(g_sDepthShadow, (vDir + half3( 0,  1, 0) * g_fPixelSize)).x, fDistance, g_vSizeMapBias.y);
	fShadow += ShadowCalcShading(texCUBE(g_sDepthShadow, (vDir + half3(-1,  0, 0) * g_fPixelSize)).x, fDistance, g_vSizeMapBias.y);
	fShadow += ShadowCalcShading(texCUBE(g_sDepthShadow, (vDir + half3( 1,  0, 0) * g_fPixelSize)).x, fDistance, g_vSizeMapBias.y);
	
	fShadow *= 0.25;

	return saturate(fShadow);
} 